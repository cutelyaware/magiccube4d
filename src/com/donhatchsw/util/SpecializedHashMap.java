// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// 102 # 1 "com/donhatchsw/util/SpecializedHashMap.prejava"
// 103 # 1 "<built-in>"
// 104 # 1 "<command-line>"
// 105 # 1 "/usr/include/stdc-predef.h" 1 3 4

// 107 # 1 "/usr/include/stdc-predef.h" 3 4
/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */




/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */

/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */
// 142 # 52 "/usr/include/stdc-predef.h" 3 4
/* wchar_t uses Unicode 10.0.0.  Version 10.0 of the Unicode Standard is
   synchronized with ISO/IEC 10646:2017, fifth edition, plus
   the following additions from Amendment 1 to the fifth edition:
   - 56 emoji characters
   - 285 hentaigana
   - 3 additional Zanabazar Square characters */
// 149 # 1 "<command-line>" 2
// 150 # 1 "com/donhatchsw/util/SpecializedHashMap.prejava"

// 152 # 1 "com/donhatchsw/util/SpecializedHashMap.prejava"
/* vim: set filetype=java: */
/*
* Copyright (c) 2019 Don Hatch Software
*/

package com.donhatchsw.util;

// 160 # 1 "com/donhatchsw/util/macros.h" 1
//
// macros.h
//
// 164 # 14 "com/donhatchsw/util/macros.h"
// NOTE: this causes a,b to be evaluated twice on failure, so is not ideal. might be better to do a block... ?
// 166 # 30 "com/donhatchsw/util/macros.h"
// Note: the additional "(a)==(b)||" is to make it work correctly for infinities...
// and causes the args to be evaluated twice.
// 169 # 67 "com/donhatchsw/util/macros.h"
// XXX ... what a mess
// 171 # 9 "com/donhatchsw/util/SpecializedHashMap.prejava" 2

/**
*  HashMap with custom keyEquals and keyHashCode.
*  Screwy that every get() and put() have an extra memory allocation :-(
*/
public abstract class SpecializedHashMap<K,V>
  // TODO: extends java.util.AbstractMap<K,V>
{
    // These must be provided by concrete subclass
    public abstract boolean keyEquals(K a, K b);
    public abstract int keyHashCode(K key);

    public SpecializedHashMap(int initialCapacity)
    {
        this.hashMap = new java.util.HashMap<KeyWrapper,V>(initialCapacity);
    };

    public static class IntArrayHashMap<V> extends SpecializedHashMap<int[],V>
    {
        public IntArrayHashMap(int initialCapacity)
        {
            super(initialCapacity);
        }
        public boolean keyEquals(int[] a, int[] b)
        {
            return java.util.Arrays.equals(a, b);
        }
        public int keyHashCode(int[] key)
        {
            return java.util.Arrays.hashCode(key);
        }
    } // IntArrayHashMap

    private java.util.HashMap<KeyWrapper,V> hashMap; // has-a, not is-a, to prevent mistakes

    private class KeyWrapper { // not static!  so it has access to our keyEquals and keyHashCode
        private K key;
        public KeyWrapper(K key)
        {
            this.key = key;
        }
        @SuppressWarnings("unchecked") // TODO: get rid of this if possible
        @Override public boolean equals(Object that)
        {
            // TODO: warns. wtf?  "warning: [unchecked] unchecked cast" required: SpecializedHashMap<K,V>.KeyWrapper; found: Object
            return keyEquals(this.key, ((KeyWrapper)that).key);
        }
        @Override public int hashCode()
        {
            return keyHashCode(this.key);
        }
    }; // KeyWrapper

    // Use a scratch KeyWrapper, to avoid any allocations
    // for operations other than put().
    private KeyWrapper scratchKeyWrapper = new KeyWrapper(null);

    /**
    * Returns the value to which the specified key is mapped,
    * or null if there is none.
    **/
    public V get(K key)
    {
        scratchKeyWrapper.key = key;
        return this.hashMap.get(scratchKeyWrapper);
    }

    /**
    * Puts the value into the table with given key (assumed immutable),
    * returning the previous value (or null if there was none)
    */
    public Object put(K key,
                      V value)
    {
        // Note that this is the only one of the basic
        // operations that can't use scratchKeyWrapper.
        return this.hashMap.put(new KeyWrapper(key), value);
    }

    /**
    * Removes the mapping for the specified key from this map if present.
    */
    public Object remove(K key)
    {
        scratchKeyWrapper.key = key;
        return this.hashMap.remove(scratchKeyWrapper);
    }

    /** Returns true if this map contains a mapping for the specified key. */
    public boolean containsKey(K key)
    {
        scratchKeyWrapper.key = key;
        return this.hashMap.containsKey(scratchKeyWrapper);
    }

    /** Returns true if this map maps one or more keys to the specific value. */
    public boolean containsValue(V value)
    {
        return this.hashMap.containsValue(value);
    }


    /**
    * Little test program.
    */
    public static void main(String args[])
    {
        System.out.println("in SpecializedHashMap main");
        SpecializedHashMap<int[],String> map = new SpecializedHashMap<int[],String>(0) {
            @Override public boolean keyEquals(int[] a, int[] b)
            {
                return java.util.Arrays.equals(a, b);
            }
            @Override public int keyHashCode(int[] key)
            {
                return java.util.Arrays.hashCode(key);
            }
        };

        int[] a = {};
        int[] b = {0};
        int[] c = {1};
        int[] d = {0,1};
        int[] e = {1,0};

        do { if (!(map.get(a) == null)) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+134 +"): " + "map.get(a) == null" + ""); } while (false);
        map.put(a, "A");
        do { if (!(map.get(a).equals("A"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+136 +"): " + "map.get(a).equals(\"A\")" + ""); } while (false);
        do { if (!(!map.get(a).equals("B"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+137 +"): " + "!map.get(a).equals(\"B\")" + ""); } while (false);
        do { if (!(map.get(b) == null)) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+138 +"): " + "map.get(b) == null" + ""); } while (false);
        map.put(b, "B");
        map.put(c, "C");
        map.put(d, "D");
        map.put(e, "E");
        do { if (!(map.get(a).equals("A"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+143 +"): " + "map.get(a).equals(\"A\")" + ""); } while (false);
        do { if (!(map.get(b).equals("B"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+144 +"): " + "map.get(b).equals(\"B\")" + ""); } while (false);
        do { if (!(map.get(c).equals("C"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+145 +"): " + "map.get(c).equals(\"C\")" + ""); } while (false);
        do { if (!(map.get(d).equals("D"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+146 +"): " + "map.get(d).equals(\"D\")" + ""); } while (false);
        do { if (!(map.get(e).equals("E"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+147 +"): " + "map.get(e).equals(\"E\")" + ""); } while (false);
        map.remove(c);
        do { if (!(map.get(a).equals("A"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+149 +"): " + "map.get(a).equals(\"A\")" + ""); } while (false);
        do { if (!(map.get(b).equals("B"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+150 +"): " + "map.get(b).equals(\"B\")" + ""); } while (false);
        do { if (!(map.get(c) == null)) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+151 +"): " + "map.get(c) == null" + ""); } while (false);
        do { if (!(map.get(d).equals("D"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+152 +"): " + "map.get(d).equals(\"D\")" + ""); } while (false);
        do { if (!(map.get(e).equals("E"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+153 +"): " + "map.get(e).equals(\"E\")" + ""); } while (false);

        do { if (!(map.get(null) == null)) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+155 +"): " + "map.get(null) == null" + ""); } while (false);
        map.remove(null);
        do { if (!(map.get(null) == null)) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+157 +"): " + "map.get(null) == null" + ""); } while (false);
        map.put(null, "NULL");
        do { if (!(map.get(null).equals("NULL"))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+159 +"): " + "map.get(null).equals(\"NULL\")" + ""); } while (false);

        // Note that, just as for a regular hashMap,
        // put(key,null) is not quite the same as remove(key),
        // as can be detected using containsKey().
        do { if (!(map.containsKey(d))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+164 +"): " + "map.containsKey(d)" + ""); } while (false);
        do { if (!(map.containsKey(e))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+165 +"): " + "map.containsKey(e)" + ""); } while (false);
        do { if (!(!map.containsValue(null))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+166 +"): " + "!map.containsValue(null)" + ""); } while (false);
        map.put(e, null);
        do { if (!(map.containsKey(d))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+168 +"): " + "map.containsKey(d)" + ""); } while (false);
        do { if (!(map.containsKey(e))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+169 +"): " + "map.containsKey(e)" + ""); } while (false);
        do { if (!(map.containsValue(null))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+170 +"): " + "map.containsValue(null)" + ""); } while (false);
        map.put(d, null);
        do { if (!(map.containsKey(d))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+172 +"): " + "map.containsKey(d)" + ""); } while (false);
        do { if (!(map.containsKey(e))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+173 +"): " + "map.containsKey(e)" + ""); } while (false);
        do { if (!(map.containsValue(null))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+174 +"): " + "map.containsValue(null)" + ""); } while (false);
        map.remove(e);
        do { if (!(map.containsKey(d))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+176 +"): " + "map.containsKey(d)" + ""); } while (false);
        do { if (!(!map.containsKey(e))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+177 +"): " + "!map.containsKey(e)" + ""); } while (false);
        do { if (!(map.containsValue(null))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+178 +"): " + "map.containsValue(null)" + ""); } while (false);
        map.remove(d);
        do { if (!(!map.containsKey(d))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+180 +"): " + "!map.containsKey(d)" + ""); } while (false);
        do { if (!(!map.containsKey(e))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+181 +"): " + "!map.containsKey(e)" + ""); } while (false);
        do { if (!(!map.containsValue(null))) throw new Error("CHECK failed at "+"com/donhatchsw/util/SpecializedHashMap.prejava"+"("+182 +"): " + "!map.containsValue(null)" + ""); } while (false);

        System.out.println("out SpecializedHashMap main");
    } // main

} // class SpecializedHashMap
