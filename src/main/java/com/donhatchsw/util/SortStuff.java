// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// 102 # 1 "com/donhatchsw/util/SortStuff.prejava"
// 103 # 1 "<built-in>"
// 104 # 1 "<command-line>"
// 105 # 1 "com/donhatchsw/util/SortStuff.prejava"
/* vim: set filetype=java: */
package com.donhatchsw.util;

/**
* Functions for qsorting and binary searching, suitable
* for use in any version of java.
* The reason for this is that Comparator and sorting stuff
* didn't come until Java 1.2.
* <p>
* This interface is cleaner, anyway--
* it never relies on the objects to *be* anything (which always comes
* back to bite you in the end); it always uses comparators instead.
* <p>
* XXX should get moved to the compat package
*/
public class SortStuff
{
    private SortStuff() {} // uninstantiatable

    /** Caller-supplied Object comparison function to be used for sorting and searching. */
    public interface Comparator
    {
        /** Should return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. */
        int compare(Object a, Object b);
    }
    /** Caller-supplied int comparison function to be used for sorting and searching. */
    public static class IntComparator
    {
        /** Should return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.  Default implementation is the standard order. */
        public int compare(int i, int j)
        {
            return i < j ? -1 :
                   i > j ? 1 : 0;
        }
    }
    /** Caller-supplied double comparison function to be used for sorting and searching. */
    public static class DoubleComparator
    {
        /** Should return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Default implementation is the standard order. */
        public int compare(double x, double y)
        {
            return x < y ? -1 :
                   x > y ? 1 : 0;
        }
    }

    /** Sorts the array of Objects using the given Comparator. */
    public static void sort(Object list[], Comparator comparator)
    {
        sortRange(list, 0, list.length-1, comparator);
    }
    /** Sorts the array of Objects using the given Comparator. */
    public static void sort(Object list[], int i0, int n, Comparator comparator)
    {
        sortRange(list, i0, i0+n-1, comparator);
    }

    private static DoubleComparator defaultDoubleComparator = new DoubleComparator();
    /** Sorts the array of doubles into increasing order. */
    public static void sort(double list[])
    {
        sortRange(list, 0, list.length-1, defaultDoubleComparator);
    }
    /** Sorts the array of doubles into increasing order. */
    public static void sort(double list[], int i0, int n)
    {
        sortRange(list, i0, i0+n-1, defaultDoubleComparator);
    }
    /** Sorts the array of doubles using the given DoubleComparator. */
    public static void sort(double list[], final DoubleComparator comparator)
    {
        sortRange(list, 0, list.length-1, comparator);
    }
    /** Sorts the array of doubles using the given DoubleComparator. */
    public static void sort(double list[], int i0, int n, final DoubleComparator comparator)
    {
        sortRange(list, i0, i0+n-1, comparator);
    }

    private static IntComparator defaultIntComparator = new IntComparator();
    /** Sorts the array of ints into increasing order. */
    public static void sort(int list[])
    {
        sortRange(list, 0, list.length-1, defaultIntComparator);
    }
    /** Sorts the array of ints into increasing order. */
    public static void sort(int list[], int i0, int n)
    {
        sortRange(list, i0, i0+n-1, defaultIntComparator);
    }
    /** Sorts the array of ints using the given IntComparator. */
    public static void sort(int list[], final IntComparator comparator)
    {
        sortRange(list, 0, list.length-1, comparator);
    }
    /** Sorts the array of ints using the given IntComparator. */
    public static void sort(int list[], int i0, int n, final IntComparator comparator)
    {
        sortRange(list, i0, i0+n-1, comparator);
    }


    //
    // The actual recursive algorithm...
    //
        private static void sortRange(Object list[], int i, int j, Comparator comparator)
        {
            if (j <= i)
                return;
            int k = (i + j) / 2;
            swap(list, k, j);
            int l = partitionRange(list, i - 1, j, list[j], comparator);
            swap(list, l, j);
            if(l - i > 1)
                sortRange(list, i, l - 1, comparator);
            if(j - l > 1)
                sortRange(list, l + 1, j, comparator);
        }
        private static void swap(Object list[], int i, int j)
        {
            Object temp = list[j];
            list[j] = list[i];
            list[i] = temp;
        }
        private static int partitionRange(Object list[], int i, int j, Object object, Comparator comparator)
        {
            int i0 = i+1; // keerist! who wrote this shit?
            do
            {
                while (comparator.compare(list[++i], object) < 0)
                    ;
                while (j > i0 && comparator.compare(list[--j], object) > 0)
                    ;
                swap(list, i, j);
            } while(i < j);
            swap(list, i, j);
            return i;
        }




        // special versions for int...
        // this is duplicate code but I think it's pretty solid.
        // XXX should maybe use the preprocessor just for this,
        // XXX then the autogenerated java file won't look too bad
        private static void sortRange(int list[], int i, int j, final IntComparator comparator)
        {
            if (j <= i)
                return;
            int k = (i + j) / 2;
            swap(list, k, j);
            int l = partitionRange(list, i - 1, j, list[j], comparator);
            swap(list, l, j);
            if(l - i > 1)
                sortRange(list, i, l - 1, comparator);
            if(j - l > 1)
                sortRange(list, l + 1, j, comparator);
        }
        private static void swap(int list[], int i, int j)
        {
            int temp = list[j];
            list[j] = list[i];
            list[i] = temp;
        }
        private static int partitionRange(int list[], int i, int j, int object, IntComparator comparator)
        {
            int i0 = i+1; // keerist! who wrote this shit?
            do
            {
                while (comparator.compare(list[++i], object) < 0) // don't need to check bounds on i, it will stop automatically because object is known to be at list[j] at start
                    ;
                // i is now at the first index in the range
                // such that list[i] >= object
                while (j > i0 && comparator.compare(list[--j], object) > 0)
                    ;
                // j is now at the last index in the range such that list[j] <= object
                swap(list, i, j);
            } while(i < j);
            swap(list, i, j);
            return i;
        }
        // and for double...
        private static void sortRange(double list[], int i, int j, final DoubleComparator comparator)
        {
            if (j <= i)
                return;
            int k = (i + j) / 2;
            swap(list, k, j);
            int l = partitionRange(list, i - 1, j, list[j], comparator);
            swap(list, l, j);
            if(l - i > 1)
                sortRange(list, i, l - 1, comparator);
            if(j - l > 1)
                sortRange(list, l + 1, j, comparator);
        }
        private static void swap(double list[], int i, int j)
        {
            double temp = list[j];
            list[j] = list[i];
            list[i] = temp;
        }
        private static int partitionRange(double list[], int i, int j, double object, DoubleComparator comparator)
        {
            int i0 = i+1; // keerist! who wrote this shit?
            do
            {
                while (comparator.compare(list[++i], object) < 0) // don't need to check bounds on i, it will stop automatically because object is known to be at list[j] at start
                    ;
                // i is now at the first index in the range
                // such that list[i] >= object
                while (j > i0 && comparator.compare(list[--j], object) > 0)
                    ;
                // j is now at the last index in the range such that list[j] <= object
                swap(list, i, j);
            } while(i < j);
            swap(list, i, j);
            return i;
        }



    /**
    *  Binary search, using comparator.
    */
    public static int bsearch(Object list[], Object item, Comparator comparator)
    {
        int lo = 0; // lowest possible
        int hi = list.length-1; // highest possible
        while (lo <= hi)
        {
            int mid = (lo+hi)/2;
            int disposition = comparator.compare(list[mid], item);
            if (disposition < 0) // list[mid] is too low
                lo = mid+1;
            else if (disposition > 0) // list[mid] is too high
                hi = mid-1;
            else
                return mid; // list[mid] is just right
        }
        return -1; // failed
    } // bsearch

    /**
    *  Remove consecutive duplicate items,
    *  as determined by comparator.  Operates on only the first oldN
    *  elements.  Returns the number of resulting elements.
    */
    public static int nodup(Object list[], int oldN, Comparator comparator)
    {
        int newN = 0;
        for (int oldI = 0; oldI < oldN; oldI++)
        {
            if (newN == 0
             || comparator.compare(list[oldI], list[newN-1]) != 0)
                list[newN++] = list[oldI];
        }
        return newN;
    } // nodup
    /**
    *  Remove consecutive duplicate items,
    *  as determined by comparator.  Returns the number of resulting elements.
    */
    public static int nodup(Object list[], Comparator comparator)
    {
        return nodup(list, list.length, comparator);
    } // nodup

} // SortStuff
